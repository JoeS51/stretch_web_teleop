#!/usr/bin/env python3

import rospy
import message_filters
import numpy as np
import cv2

from sensor_msgs.msg import Image, CameraInfo, CompressedImage
from cv_bridge import CvBridge


class RotateVideoStream:
    def __init__(self):
        self.loop_rate = rospy.Rate(20)

        self.realsense_rgb_image = None
        self.nav_camera_rgb_image = None
        self.cv_bridge = CvBridge()

        self.publisher_realsense = rospy.Publisher('/camera/color/image_raw/rotated', Image, queue_size=10)
        self.publisher_realsense_cmp = rospy.Publisher('/camera/color/image_raw/rotated/compressed', CompressedImage, queue_size=10)

        self.publisher_nav = rospy.Publisher('/navigation_camera/image_raw/rotated', Image, queue_size=10)
        self.publisher_nav_cmp = rospy.Publisher('/navigation_camera/image_raw/rotated/compressed', CompressedImage, queue_size=10)

        self.camera_rgb_subscriber = message_filters.Subscriber(f'/camera/color/image_raw', Image)
        self.nav_camera_rgb_subscriber = message_filters.Subscriber(f'/navigation_camera/image_raw', Image)

        self.camera_synchronizer = message_filters.ApproximateTimeSynchronizer([
            self.camera_rgb_subscriber, self.nav_camera_rgb_subscriber], 10, 1)
        self.camera_synchronizer.registerCallback(self.camera_callback)

    def camera_callback(self, ros_rgb_image, ros_nav_rgb_image):
        realsense_rgb_image = self.cv_bridge.imgmsg_to_cv2(ros_rgb_image)
        realsense_rgb_image = cv2.cvtColor(realsense_rgb_image, cv2.COLOR_BGR2RGB)
        self.realsense_rgb_image = cv2.rotate(realsense_rgb_image, cv2.ROTATE_90_CLOCKWISE)

        nav_camera_rgb_image = self.cv_bridge.imgmsg_to_cv2(ros_nav_rgb_image)
        nav_camera_rgb_image = cv2.cvtColor(nav_camera_rgb_image, cv2.COLOR_BGR2RGB)
        self.nav_camera_rgb_image = cv2.rotate(nav_camera_rgb_image, cv2.ROTATE_90_CLOCKWISE)

    def start(self):
        while not rospy.is_shutdown():
            if self.realsense_rgb_image is not None:
                self.publisher_realsense.publish(self.cv_bridge.cv2_to_imgmsg(self.realsense_rgb_image))
                msg = CompressedImage()
                msg.header.stamp = rospy.Time.now()
                msg.format = "jpeg"
                msg.data = np.array(cv2.imencode('.jpg', self.realsense_rgb_image)[1]).tobytes()
                self.publisher_realsense_cmp.publish(msg)

            if self.nav_camera_rgb_image is not None:
                self.publisher_nav.publish(self.cv_bridge.cv2_to_imgmsg(self.nav_camera_rgb_image))
                msg = CompressedImage()
                msg.header.stamp = rospy.Time.now()
                msg.format = "jpeg"
                msg.data = np.array(cv2.imencode('.jpg', self.nav_camera_rgb_image)[1]).tobytes()
                self.publisher_nav_cmp.publish(msg)

            rospy.sleep(0.025)


if __name__ == '__main__':
    rospy.init_node('rotate_video_stream')
    node = RotateVideoStream()
    node.start()